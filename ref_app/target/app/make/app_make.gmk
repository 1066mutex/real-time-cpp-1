# ------------------------------------------------------------------------------
# 
# Makefile
#
# Build file for the Cpp_Board application (app) using the GNU tools
#
# Based on GNU Make 3.81
#
# 07-April-2010
#
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# compiler location, build from GCC version and GCC target
# ------------------------------------------------------------------------------
COMPILER = gcc-$(GCC_VERSION)-$(GCC_TARGET)


# ------------------------------------------------------------------------------
# paths
# ------------------------------------------------------------------------------
PATH_TOOLS           = tools
PATH_TOOLS_UTIL      = $(PATH_TOOLS)\Util
PATH_TOOLS_MINGW     = $(PATH_TOOLS_UTIL)\MinGW\msys\1.0
PATH_TOOLS_MINGW_BIN = $(PATH_TOOLS_MINGW)\bin
PATH_TOOLS_CC        = $(PATH_TOOLS_MINGW)\local\$(COMPILER)\bin

PATH_APP       = src
PATH_TGT       = target/micros/$(TGT)
PATH_APP_MAKE  = target/app/make
PATH_TGT_MAKE  = $(PATH_TGT)/make
PATH_BIN       = bin
PATH_TMP       = tmp
PATH_OBJ       = $(PATH_TMP)/obj
PATH_SRC       = $(PATH_TMP)/src
PATH_ERR       = $(PATH_TMP)/err


# ------------------------------------------------------------------------------
# include files
# ------------------------------------------------------------------------------
include $(PATH_APP_MAKE)/app_files.gmk      # Application file list
include $(PATH_TGT_MAKE)/$(TGT)_files.gmk   # Target filelist
include $(PATH_TGT_MAKE)/$(TGT)_flags.gmk   # Target compiler flags


# ------------------------------------------------------------------------------
# application
# ------------------------------------------------------------------------------
APP = $(PATH_BIN)/app

# ------------------------------------------------------------------------------
# object files
# ------------------------------------------------------------------------------
FILES_TMP   = $(FILES_CPP) $(FILES_TGT)
FILES_O     = $(addprefix $(PATH_OBJ)/, $(notdir $(addsuffix .o, $(FILES_TMP))))
FILE_LDEF   = $(PATH_TGT_MAKE)/$(TGT).ld
FILES_CRT_O = $(addprefix $(PATH_OBJ)/, $(notdir $(addsuffix .o, $(FILES_CRT))))


# ------------------------------------------------------------------------------
# VPATH definition
#
# VPATH is required for the maker to find the C-/ASM-Source files.
# Extract the directory/module names from the file list with the dir
# command and remove the duplicated directory names with the sort command.
# FILES_PRJ is listed first to make sure that the source files in the project
# directory are searched first.
# ------------------------------------------------------------------------------
VPATH := $(sort $(dir $(FILES_TMP)))


# ------------------------------------------------------------------------------
# Development tools
# ------------------------------------------------------------------------------
AR        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-ar.exe
CL        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-g++.exe
CC        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-g++.exe
OBJDUMP   = $(PATH_TOOLS_CC)\$(GCC_TARGET)-objdump.exe
OBJCOPY   = $(PATH_TOOLS_CC)\$(GCC_TARGET)-objcopy.exe
NM        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-nm.exe
CPPFILT   = $(PATH_TOOLS_MINGW_BIN)\c++filt.exe
READELF   = $(PATH_TOOLS_CC)\$(GCC_TARGET)-readelf.exe
SIZE      = $(PATH_TOOLS_CC)\$(GCC_TARGET)-size.exe
HEX_MANIP = $(PATH_TOOLS)\AL\HexTools\ALHexManip
ECHO      = $(PATH_TOOLS_MINGW_BIN)\echo.exe
MAKE      = $(PATH_TOOLS_MINGW_BIN)\make.exe
MKDIR     = $(PATH_TOOLS_MINGW_BIN)\mkdir.exe
SED       = $(PATH_TOOLS_MINGW_BIN)\sed.exe


# ------------------------------------------------------------------------------
# temporary files / helpers
# ------------------------------------------------------------------------------
HEX_MANIP_SCRIPT_FILE = $(PATH_TGT_MAKE)/$(TGT)_hex_manip_script.hxm


# ------------------------------------------------------------------------------
# Tool parameters
# ------------------------------------------------------------------------------
C_INCLUDES = -I$(PATH_APP) -I$(PATH_APP)/mcal/$(TGT)
GCCFLAGS   = $(C_INCLUDES) $(TGTFLAGS) -Wall -Wextra -pedantic -gdwarf-2 -fno-use-cxa-atexit -fno-exceptions -fno-enforce-eh-specs -O3 -finline-functions -finline-limit=64
CFLAGS     = $(GCCFLAGS) -x c
CPPFLAGS   = $(GCCFLAGS) -std=c++0x -fno-rtti -fno-nonansi-builtins -fno-threadsafe-statics -fno-enforce-eh-specs
LFLAGS     = $(GCCFLAGS) -x none -nostartfiles -nostdlib


# ------------------------------------------------------------------------------
# Main-Dependencies (app: all)
# ------------------------------------------------------------------------------
.PHONY: all
all: clean_prj version $(APP)_flash.hex $(APP)_nm.txt $(APP).elf


# ------------------------------------------------------------------------------
# Main-Dependencies (app: rebuild)
# ------------------------------------------------------------------------------
.PHONY: rebuild
rebuild: clean_all all


# ------------------------------------------------------------------------------
# clean project
# ------------------------------------------------------------------------------
.PHONY: clean_prj
clean_prj:
	@-$(ECHO) +++ cleaning project
	@-$(MKDIR) -p $(PATH_BIN)
	@-$(MKDIR) -p $(PATH_OBJ)
	@-$(MKDIR) -p $(PATH_ERR)
	@-$(MKDIR) -p $(PATH_SRC)
	@if exist $(PATH_BIN)/*.*   del /Q /S $(subst /,\,$(PATH_BIN)/*.*)   > NUL  2> NUL


# ------------------------------------------------------------------------------
# clean all
# ------------------------------------------------------------------------------
.PHONY: clean_all
clean_all:
	@-$(ECHO) +++ cleaning all
	@if exist $(PATH_OBJ)/*.*   del /Q /S $(subst /,\,$(PATH_OBJ)/*.*)   > NUL  2> NUL
	@if exist $(PATH_ERR)/*.*   del /Q /S $(subst /,\,$(PATH_ERR)/*.*)   > NUL  2> NUL
	@if exist $(PATH_SRC)/*.*   del /Q /S $(subst /,\,$(PATH_SRC)/*.*)   > NUL  2> NUL
	@if exist $(PATH_BIN)/*.*   del /Q /S $(subst /,\,$(PATH_BIN)/*.*)   > NUL  2> NUL


# ------------------------------------------------------------------------------
# print the GNUmake version and the compiler version
# ------------------------------------------------------------------------------
.PHONY: version
version:
  # Print the GNU make version and the compiler version
	@$(ECHO) GNUmake version...
	@$(MAKE) --version
	@$(ECHO) GCC version...
	@$(CL) -v


# ------------------------------------------------------------------------------
# link/locate application
# ------------------------------------------------------------------------------
$(APP).elf : $(FILE_LDEF) $(FILES_O)
	@-$(ECHO) +++ linking application: $(APP).elf
	@-$(CL) $(LFLAGS) $(FILES_O) -Wl,-T$(FILE_LDEF),-Map,$(APP).map$(LFLAGS_WL) -o $(APP).elf
#	@-$(ECHO) +++ creating crt archive: libcrt$(GCC_TARGET).a
#	@-$(AR) cr $(PATH_BIN)/libcrt$(GCC_TARGET).a $(FILES_CRT_O)


# ------------------------------------------------------------------------------
# parse object files for symbols
# ------------------------------------------------------------------------------
$(APP)_nm.txt : $(APP).elf
	@-$(ECHO) +++ parsing symbols with nm: $(APP)_nm.txt
	@-$(NM) --numeric-sort --print-size $(APP).elf > $(APP)_nm.txt
	@-$(ECHO) +++ demangling symbols with c++filt: $(APP)_cppfilt.txt
	@-$(NM) --numeric-sort --print-size $(APP).elf | $(CPPFILT) > $(APP)_cppfilt.txt
	@-$(ECHO) +++ parsing symbols with readelf: $(APP)_readelf.txt
	@-$(READELF) --syms $(APP).elf > $(APP)_readelf.txt
	@-$(ECHO) +++ creating size summary table with size: $(APP)_size.txt
	@-$(SIZE) -A -t $(APP).elf > $(APP)_size.txt


# ------------------------------------------------------------------------------
# create hex mask
# ------------------------------------------------------------------------------
$(APP)_flash.hex : $(APP).elf
	@-$(ECHO) +++ creating hex module: $(APP)_flash.hex
	@-$(OBJCOPY) -O ihex $(APP).elf $(APP).hex
	@-$(OBJCOPY) -S -O binary $(APP).elf $(APP).bin
	@-$(HEX_MANIP) outFile=$(APP)_flash.hex binFile=$(APP)_flash.bin outFileMot=$(APP)_flash.mot inFile=$(APP).hex elfFile=$(APP).elf $(HEX_MANIP_SCRIPT_FILE)


# ------------------------------------------------------------------------------
# Dependencyfile include (build)
#
# Include all dependency (*.d) files generated previously from the compiler.
# If the files do not exist then the includes will be ignored.
# ------------------------------------------------------------------------------
ifneq ($(MAKECMDGOALS),rebuild)
-include $(subst .o,.d,$(FILES_O))       # for example Tmp/obj/SysStart.d, Tmp/obj/Hal.d, etc
endif


# ------------------------------------------------------------------------------
# include rules
# ------------------------------------------------------------------------------
include $(PATH_APP_MAKE)/app_rules.gmk
