///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2016.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef _COMPLEX_2012_02_20_
  #define _COMPLEX_2012_02_20_

  #if defined(__GNUC__)
  #pragma GCC system_header
  #endif

  #include "impl/_stl_local_constexpr.h"
  #include <cmath>

  // Implement std::complex for compilers that do not support it.

  namespace std
  {
    // Forward template class definitions.
    template<typename T> class complex;
    template<> class complex<float>;
    template<> class complex<double>;
    template<> class complex<long double>;

    // Forward template function definitions.
    template<typename T> T          real (const complex<T>&);
    template<typename T> T          imag (const complex<T>&);
    template<typename T> T          abs  (const complex<T>&);
    template<typename T> T          arg  (const complex<T>&);
    template<typename T> T          norm (const complex<T>&);
    template<typename T> complex<T> conj (const complex<T>&);
    template<typename T> complex<T> proj (const complex<T>&);
    template<typename T> complex<T> polar(const complex<T>&, const T& = 0);
    template<typename T> complex<T> sqrt (const complex<T>&);
    template<typename T> complex<T> sin  (const complex<T>&);
    template<typename T> complex<T> cos  (const complex<T>&);
    template<typename T> complex<T> tan  (const complex<T>&);
    template<typename T> complex<T> asin (const complex<T>&);
    template<typename T> complex<T> acos (const complex<T>&);
    template<typename T> complex<T> atan (const complex<T>&);
    template<typename T> complex<T> exp  (const complex<T>&);
    template<typename T> complex<T> log  (const complex<T>&);
    template<typename T> complex<T> log10(const complex<T>&);
    template<typename T> complex<T> pow  (const complex<T>&, int);
    template<typename T> complex<T> pow  (const complex<T>&, const T&);
    template<typename T> complex<T> pow  (const complex<T>&, const complex<T>&);
    template<typename T> complex<T> pow  (const T&, const complex<T>&);
    template<typename T> complex<T> sinh (const complex<T>&);
    template<typename T> complex<T> cosh (const complex<T>&);
    template<typename T> complex<T> tanh (const complex<T>&);
    template<typename T> complex<T> asinh(const complex<T>&);
    template<typename T> complex<T> acosh(const complex<T>&);
    template<typename T> complex<T> atanh(const complex<T>&);

    template<typename T>
    class complex
    {
    public:
      typedef T value_type;

      complex(const value_type& re_ = value_type(),
              const value_type& im_ = value_type()) : my_re(re_),
                                                      my_im(im_) { }

      complex(const complex& my_v) : my_re(my_v.real),
                                     my_im(my_v.imag) { }

      template<typename X>
      complex(const complex<X>& my_z) : my_re(my_z.real),
                                        my_im(my_z.imag) { }

      value_type real() const { return my_re; }
      value_type imag() const { return my_im; }

      void real(value_type my_v) { my_re = my_v; }
      void imag(value_type my_v) { my_im = my_v; }

      complex<value_type>& operator=(const value_type& my_v)
      {
        my_re = my_v;
        my_im = value_type(0);

        return *this;
      }

      complex<value_type>& operator=(const complex<value_type>& my_v)
      {
        if(this != &my_v)
        {
          my_re = value_type(my_v.my_re);
          my_im = value_type(my_v.my_im);
        }

        return *this;
      }

      template<typename X>
      complex<value_type>& operator=(const complex<X>& my_v)
      {
        my_re = value_type(my_v.my_re);
        my_im = value_type(my_v.my_im);

        return *this;
      }

      complex<value_type>& operator+=(const value_type& my_v)
      {
        my_re += my_v;

        return *this;
      }

      complex<value_type>& operator-=(const value_type& my_v)
      {
        my_re -= my_v;

        return *this;
      }

      complex<value_type>& operator*=(const value_type& my_v)
      {
        my_re *= my_v;
        my_im *= my_v;

        return *this;
      }

      complex<value_type>& operator/=(const value_type& my_v)
      {
        my_re /= my_v;
        my_im /= my_v;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator+=(const complex<X>& my_z)
      {
        my_re += value_type(my_z.my_re);
        my_im += value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator-=(const complex<X>& my_z)
      {
        my_re -= value_type(my_z.my_re);
        my_im -= value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator*=(const complex<X>& my_z)
      {
        const value_type tmp_im((my_re * my_z.my_im) + (my_im * my_z.my_re));

        my_re = (my_re * my_z.my_re) - (my_im * my_z.my_im);
        my_im = tmp_im;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator/=(const complex<X>& my_z)
      {
        const value_type denominator(std::norm(my_z));

        const value_type tmp_im((my_im * my_z.my_re) - (my_re * my_z.my_im));

        my_re = ((my_re * my_z.my_re) + (my_im * my_z.my_im)) / denominator;
        my_im = tmp_im / denominator;

        return *this;
      }

    private:
      value_type my_re;
      value_type my_im;
    };

    template<>
    class complex<float>
    {
    public:
      typedef float value_type;

      STL_LOCAL_CONSTEXPR complex(float re_ = 0.0F,
                                  float im_ = 0.0F) : my_re(re_),
                                                      my_im(im_) { }

      explicit STL_LOCAL_CONSTEXPR complex(const complex<double>&);
      explicit STL_LOCAL_CONSTEXPR complex(const complex<long double>&);

      STL_LOCAL_CONSTEXPR value_type real() const { return my_re; }
      STL_LOCAL_CONSTEXPR value_type imag() const { return my_im; }

      void real(value_type my_v) { my_re = my_v; }
      void imag(value_type my_v) { my_im = my_v; }

      complex<value_type>& operator=(value_type my_v)
      {
        my_re = my_v;
        my_im = value_type(0);

        return *this;
      }

      complex<value_type>& operator=(const complex<value_type>& my_v)
      {
        if(this != &my_v)
        {
          my_re = value_type(my_v.my_re);
          my_im = value_type(my_v.my_im);
        }

        return *this;
      }

      complex<value_type>& operator+=(value_type my_v)
      {
        my_re += my_v;

        return *this;
      }

      complex<value_type>& operator-=(value_type my_v)
      {
        my_re -= my_v;

        return *this;
      }

      complex<value_type>& operator*=(value_type my_v)
      {
        my_re *= my_v;
        my_im *= my_v;

        return *this;
      }

      complex<value_type>& operator/=(value_type my_v)
      {
        my_re /= my_v;
        my_im /= my_v;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator+=(const complex<X>& my_z)
      {
        my_re += value_type(my_z.my_re);
        my_im += value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator-=(const complex<X>& my_z)
      {
        my_re -= value_type(my_z.my_re);
        my_im -= value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator*=(const complex<X>& my_z)
      {
        const value_type tmp_im((my_re * my_z.my_im) + (my_im * my_z.my_re));

        my_re = (my_re * my_z.my_re) - (my_im * my_z.my_im);
        my_im = tmp_im;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator/=(const complex<X>& my_z)
      {
        const value_type denominator(std::norm(my_z));

        const value_type tmp_im((my_im * my_z.my_re) - (my_re * my_z.my_im));

        my_re = ((my_re * my_z.my_re) + (my_im * my_z.my_im)) / denominator;
        my_im = tmp_im / denominator;

        return *this;
      }

    private:
      value_type my_re;
      value_type my_im;
    };

    template<>
    class complex<double>
    {
    public:
      typedef double value_type;

      STL_LOCAL_CONSTEXPR complex(double re_ = 0.0,
                                  double im_ = 0.0) : my_re(re_),
                                                      my_im(im_) { }

      STL_LOCAL_CONSTEXPR complex(const complex<float>& my_f) : my_re(value_type( my_f.real())),
                                                                my_im(value_type( my_f.imag())) { }

      explicit STL_LOCAL_CONSTEXPR complex(const complex<long double>&);

      STL_LOCAL_CONSTEXPR value_type real() const { return my_re; }
      STL_LOCAL_CONSTEXPR value_type imag() const { return my_im; }

      void real(value_type my_v) { my_re = my_v; }
      void imag(value_type my_v) { my_im = my_v; }

      complex<value_type>& operator=(value_type my_v)
      {
        my_re = my_v;
        my_im = value_type(0);

        return *this;
      }

      complex<value_type>& operator=(const complex<value_type>& my_v)
      {
        if(this != &my_v)
        {
          my_re = value_type(my_v.my_re);
          my_im = value_type(my_v.my_im);
        }

        return *this;
      }

      complex<value_type>& operator+=(value_type my_v)
      {
        my_re += my_v;

        return *this;
      }

      complex<value_type>& operator-=(value_type my_v)
      {
        my_re -= my_v;

        return *this;
      }

      complex<value_type>& operator*=(value_type my_v)
      {
        my_re *= my_v;
        my_im *= my_v;

        return *this;
      }

      complex<value_type>& operator/=(value_type my_v)
      {
        my_re /= my_v;
        my_im /= my_v;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator+=(const complex<X>& my_z)
      {
        my_re += value_type(my_z.my_re);
        my_im += value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator-=(const complex<X>& my_z)
      {
        my_re -= value_type(my_z.my_re);
        my_im -= value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator*=(const complex<X>& my_z)
      {
        const value_type tmp_im((my_re * my_z.my_im) + (my_im * my_z.my_re));

        my_re = (my_re * my_z.my_re) - (my_im * my_z.my_im);
        my_im = tmp_im;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator/=(const complex<X>& my_z)
      {
        const value_type denominator(std::norm(my_z));

        const value_type tmp_im((my_im * my_z.my_re) - (my_re * my_z.my_im));

        my_re = ((my_re * my_z.my_re) + (my_im * my_z.my_im)) / denominator;
        my_im = tmp_im / denominator;

        return *this;
      }

    private:
      value_type my_re;
      value_type my_im;
    };

    template<>
    class complex<long double>
    {
    public:
      typedef long double value_type;

      STL_LOCAL_CONSTEXPR complex(value_type re_ = 0.0L,
                                  value_type im_ = 0.0L) : my_re(re_),
                                                           my_im(im_) { }

      STL_LOCAL_CONSTEXPR complex(const complex<float>& my_f) : my_re(value_type(my_f.real())),
                                                                my_im(value_type(my_f.imag())) { }

      STL_LOCAL_CONSTEXPR complex(const complex<double>& my_d) : my_re(value_type(my_d.real())),
                                                                 my_im(value_type(my_d.imag())) { }

      STL_LOCAL_CONSTEXPR value_type real() const { return my_re; }
      STL_LOCAL_CONSTEXPR value_type imag() const { return my_im; }

      void real(value_type my_v) { my_re = my_v; }
      void imag(value_type my_v) { my_im = my_v; }

      complex<value_type>& operator=(value_type my_v)
      {
        my_re = my_v;
        my_im = value_type(0);

        return *this;
      }

      complex<value_type>& operator=(const complex<value_type>& my_v)
      {
        if(this != &my_v)
        {
          my_re = value_type(my_v.my_re);
          my_im = value_type(my_v.my_im);
        }

        return *this;
      }

      complex<value_type>& operator+=(value_type my_v)
      {
        my_re += my_v;

        return *this;
      }

      complex<value_type>& operator-=(value_type my_v)
      {
        my_re -= my_v;

        return *this;
      }

      complex<value_type>& operator*=(value_type my_v)
      {
        my_re *= my_v;
        my_im *= my_v;

        return *this;
      }

      complex<value_type>& operator/=(value_type my_v)
      {
        my_re /= my_v;
        my_im /= my_v;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator+=(const complex<X>& my_z)
      {
        my_re += value_type(my_z.my_re);
        my_im += value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator-=(const complex<X>& my_z)
      {
        my_re -= value_type(my_z.my_re);
        my_im -= value_type(my_z.my_im);

        return *this;
      }

      template<typename X>
      complex<value_type>& operator*=(const complex<X>& my_z)
      {
        const value_type tmp_im((my_re * my_z.my_im) + (my_im * my_z.my_re));

        my_re = (my_re * my_z.my_re) - (my_im * my_z.my_im);
        my_im = tmp_im;

        return *this;
      }

      template<typename X>
      complex<value_type>& operator/=(const complex<X>& my_z)
      {
        const value_type denominator(std::norm(my_z));

        const value_type tmp_im((my_im * my_z.my_re) - (my_re * my_z.my_im));

        my_re = ((my_re * my_z.my_re) + (my_im * my_z.my_im)) / denominator;
        my_im = tmp_im / denominator;

        return *this;
      }

    private:
      value_type my_re;
      value_type my_im;
    };

    // These constructors are located here because they need to be
    // implemented after the template specializations have been declared.

    STL_LOCAL_CONSTEXPR complex<float>::complex (const complex<double>& my_d) :       my_re(float ( my_d.real())), my_im(float ( my_d.imag())) { }
    STL_LOCAL_CONSTEXPR complex<float>::complex (const complex<long double>& my_ld) : my_re(float (my_ld.real())), my_im(float (my_ld.imag())) { }
    STL_LOCAL_CONSTEXPR complex<double>::complex(const complex<long double>& my_ld) : my_re(double(my_ld.real())), my_im(double(my_ld.imag())) { }

    // 26.4.7, values
    template<typename T> T real(const complex<T>& my_z) { return my_z.real(); }
    template<typename T> T imag(const complex<T>& my_z) { return my_z.imag(); }
    template<typename T> T abs (const complex<T>& my_z) { using std::sqrt;  return sqrt((real(my_z) * real(my_z)) + (imag(my_z) * imag(my_z))); }
    template<typename T> T arg (const complex<T>& my_z) { using std::atan2; return atan2(my_z.imag(), my_z.real()); }
    template<typename T> T norm(const complex<T>& my_z) { return (real(my_z) * real(my_z)) + (imag(my_z) * imag(my_z)); }

    template<typename T> complex<T> conj (const complex<T>& my_z) { return complex<T>(my_z.real(), -my_z.imag()); }

    template<typename T> complex<T> proj (const complex<T>& my_z)
    {
      const T denominator(std::norm(my_z) + T(1.0F));

      return std::complex<T>((T(2.0F) * my_z.real()) / denominator,
                             (T(2.0F) * my_z.imag()) / denominator);
    }

    template<typename T> complex<T> polar(const T& my_rho, const T& my_theta = 0)
    {
      using std::sin;
      using std::cos;

      return complex<T>(my_rho * cos(my_theta), my_rho * sin(my_theta));
    }

    // Global add, sub, mul, div.
    template<typename T> complex<T> operator+(const complex<T>& my_u, const complex<T>& my_v) { return complex<T>(my_u.real() + my_v.real(), my_u.imag() + my_v.imag()); }
    template<typename T> complex<T> operator-(const complex<T>& my_u, const complex<T>& my_v) { return complex<T>(my_u.real() - my_v.real(), my_u.imag() - my_v.imag()); }

    template<typename T> complex<T> operator*(const complex<T>& my_u, const complex<T>& my_v)
    {
      return complex<T>((my_u.real() * my_v.real()) - (my_u.imag() * my_v.imag()),
                        (my_u.real() * my_v.imag()) + (my_u.imag() * my_v.real()));
    }

    template<typename T> complex<T> operator/(const complex<T>& my_u, const complex<T>& my_v)
    {
      const T denominator(std::norm(my_v));

      const T tmp_im((my_u.imag() * my_v.real()) - (my_u.real() * my_v.imag()));

      return complex<T>(((my_u.real() * my_v.real()) + (my_u.imag() * my_v.imag())) / denominator,
                          tmp_im / denominator);
    }

    template<typename T> complex<T> operator+(const complex<T>& my_u, const T& my_v)  { return complex<T>(my_u.real() + my_v, my_u.imag()); }
    template<typename T> complex<T> operator-(const complex<T>& my_u, const T& my_v)  { return complex<T>(my_u.real() - my_v, my_u.imag()); }
    template<typename T> complex<T> operator*(const complex<T>& my_u, const T& my_v)  { return complex<T>(my_u.real() * my_v, my_u.imag() * my_v); }
    template<typename T> complex<T> operator/(const complex<T>& my_u, const T& my_v)  { return complex<T>(my_u.real() / my_v, my_u.imag() / my_v); }

    template<typename T> complex<T> operator+(const T& my_u, const complex<T>& my_v) { return complex<T>(my_u + my_v.real(), my_v.imag()); }
    template<typename T> complex<T> operator-(const T& my_u, const complex<T>& my_v) { return complex<T>(my_u - my_v.real(), -my_v.imag()); }
    template<typename T> complex<T> operator*(const T& my_u, const complex<T>& my_v) { return complex<T>(my_u * my_v.real(), my_u * my_v.imag()); }
    template<typename T> complex<T> operator/(const T& my_u, const complex<T>& my_v) { const T denominator(norm(my_v)); return complex<T>((my_u * my_v.real()) / denominator, (-my_u * my_v.imag()) / denominator); }

    // Unary +/-
    template<typename T> complex<T> operator+(const complex<T>& my_u) { return my_u; }
    template<typename T> complex<T> operator-(const complex<T>& my_u) { return complex<T>(-my_u.real(), -my_u.imag()); }

    // Equality and inequality
    template<typename T> bool operator==(const complex<T>& my_u, const complex<T>& my_v) { return ((my_u.real() == my_v.real()) && (my_u.imag() == my_v.imag())); }
    template<typename T> bool operator!=(const complex<T>& my_u, const complex<T>& my_v) { return ((my_u.real() != my_v.real()) || (my_u.imag() != my_v.imag())); }

    template<typename T> bool operator==(const complex<T>& my_u, const T& my_v) { return ((my_u.real() == my_v) && (my_u.imag() == T(0))); }
    template<typename T> bool operator!=(const complex<T>& my_u, const T& my_v) { return ((my_u.real() != my_v) || (my_u.imag() != T(0))); }

    template<typename T> bool operator==(const T& my_u, const complex<T>& my_v) { return ((my_u == my_v.real()) && (my_v.imag() == T(0))); }
    template<typename T> bool operator!=(const T& my_u, const complex<T>& my_v) { return ((my_u != my_v.real()) || (my_v.imag() != T(0))); }

    namespace detail
    {
      template<typename T> complex<T> multiply_by_i(const complex<T>& my_z)
      {
        const T tmp_r = my_z.real();

        return complex<T>(-my_z.imag(), tmp_r);
      }
    }

    // 26.4.8, transcendentals
    template<typename T> complex<T> sqrt(const complex<T>& my_z)
    {
      using std::fabs;
      using std::sqrt;

      // sqrt(*this) = (s, I / 2s)     for R >= 0
      //               (|I| / 2s, +-s) for R <  0
      // where s = sqrt{ [ |R| + sqrt(R^2 + I^2) ] / 2 },
      // and the +- sign is the same as the sign of I.
      const T zr = my_z.real();
      const T s  = sqrt((fabs(zr) + std::abs(my_z)) / T(2.0F));
      const T zi = my_z.imag();

      if(zr >= T(0.0F))
      {
        return complex<T>(s, (zi / s) / T(2.0F));
      }
      else
      {
        const bool imag_is_pos = (zi >= T(0.0F));

        return complex<T>((fabs(zi) / s) / T(2.0F), (imag_is_pos ? s : -s));
      }
    }

    template<typename T> complex<T> sin(const complex<T>& my_z)
    {
      using std::sin;
      using std::cos;
      using std::sinh;
      using std::cosh;

      return complex<T>(sin(my_z.real()) * cosh(my_z.imag()),
                        cos(my_z.real()) * sinh(my_z.imag()));
    }

    template<typename T> complex<T> cos(const complex<T>& my_z)
    {
      using std::sin;
      using std::cos;
      using std::sinh;
      using std::cosh;

      return complex<T>(  cos(my_z.real()) * cosh(my_z.imag()),
                        -(sin(my_z.real()) * sinh(my_z.imag())));
    }

    template<typename T> complex<T> tan(const complex<T>& my_z)
    {
      return std::sin(my_z) / std::cos(my_z);
    }

    template<typename T> complex<T> asin(const complex<T>& my_z)
    {
      return -detail::multiply_by_i(std::log(detail::multiply_by_i(my_z) + std::sqrt(T(1.0F) - (my_z * my_z))));
    }

    template<typename T> complex<T> acos(const complex<T>& my_z)
    {
      return T(1.570796326794896619231321691639751442099L) - std::asin(my_z);
    }

    template<typename T> complex<T> atan(const complex<T>& my_z)
    {
      const complex<T> izz = detail::multiply_by_i(my_z);

      return detail::multiply_by_i(std::log(T(1) - izz) - std::log(T(1) + izz)) / T(2.0F);
    }

    template<typename T> complex<T> exp(const complex<T>& my_z)
    {
      using std::exp;
      using std::sin;
      using std::cos;

      return complex<T>(cos(my_z.imag()), sin(my_z.imag())) * exp(my_z.real());
    }

    template<typename T> complex<T> log(const complex<T>& my_z)
    {
      using std::atan2;
      using std::log;

      return complex<T>(log(std::norm(my_z)) / T(2.0F),
                        atan2(my_z.imag(), my_z.real()));
    }

    template<typename T> complex<T> log10(const complex<T>& my_z)
    {
      return std::log(my_z) / T(2.302585092994045684017991454684364207601L);
    }

    template<typename T> complex<T> pow(const complex<T>& my_z, int my_pn)
    {
      if     (my_pn <  0) { return  T(1.0F) / pow(my_z, -my_pn); }
      else if(my_pn == 0) { return  T(1.0F); }
      else if(my_pn == 1) { return  my_z; }
      else if(my_pn == 2) { return  my_z * my_z; }
      else if(my_pn == 3) { return (my_z * my_z) * my_z; }
      else if(my_pn == 4) { const complex<T> x2 = my_z * my_z; return (x2 * x2); }
      else
      {
        // The variable xn stores the binary powers of my_z.
        complex<T> result(((my_pn % 2) != 0) ? my_z : complex<T>(T(1.0F)));
        complex<T> xn    (my_z);

        int p2 = my_pn;

        while((p2 /= 2) != 0)
        {
          // Square xn for each binary power.
          xn *= xn;

          const bool has_binary_power = ((p2 % 2) != 0);

          if(has_binary_power)
          {
            // Multiply the result with each binary power contained in the exponent.
            result *= xn;
          }
        }

        return result;
      }
    }

    template<typename T> complex<T> pow(const complex<T>& my_z, const T& my_a)
    {
      std::exp(my_a * std::log(my_z));
    }

    template<typename T> complex<T> pow(const complex<T>& my_z, const complex<T>& my_a)
    {
      std::exp(my_a * std::log(my_z));
    }

    template<typename T> complex<T> pow(const T& my_z, const complex<T>& my_a)
    {
      using std::log;

      std::exp(my_a * log(my_z));
    }

    template<typename T> complex<T> sinh(const complex<T>& my_z)
    {
      using std::sin;
      using std::cos;
      using std::sinh;
      using std::cosh;

      return complex<T>(cos (my_z.imag()) * sinh(my_z.real()),
                        cosh(my_z.real()) * sin (my_z.imag()));
    }

    template<typename T> complex<T> cosh(const complex<T>& my_z)
    {
      using std::sin;
      using std::cos;
      using std::sinh;
      using std::cosh;

      return complex<T>(cos(my_z.imag()) * cosh(my_z.real()),
                        sin(my_z.imag()) * sinh(my_z.real()));
    }

    template<typename T> complex<T> tanh(const complex<T>& my_z)
    {
      return std::sinh(my_z) / std::cosh(my_z);
    }

    template<typename T> complex<T> asinh(const complex<T>& my_z)
    {
      return std::log(my_z + std::sqrt((my_z * my_z) + T(1.0F)));
    }

    template<typename T> complex<T> acosh(const complex<T>& my_z)
    {
      const complex<T> zp(my_z.real() + T(1.0F), my_z.imag());
      const complex<T> zm(my_z.real() - T(1.0F), my_z.imag());

      return std::log(my_z + (zp * std::sqrt(zm / zp)));
    }

    template<typename T> complex<T> atanh(const complex<T>& my_z)
    {
      return (std::log(T(1.0F) + my_z) - std::log(T(1.0F) - my_z)) / T(2.0F);
    }

    STL_LOCAL_CONSTEXPR std::complex<float>       operator""if(long double imag_literal)        { return std::complex<float>      {0.0F, static_cast<float>      (imag_literal)}; }
    STL_LOCAL_CONSTEXPR std::complex<double>      operator""i (long double imag_literal)        { return std::complex<double>     {0.0,  static_cast<double>     (imag_literal)}; }
    STL_LOCAL_CONSTEXPR std::complex<long double> operator""il(long double imag_literal)        { return std::complex<long double>{0.0L, static_cast<long double>(imag_literal)}; }

    STL_LOCAL_CONSTEXPR std::complex<float>       operator""if(unsigned long long imag_literal) { return std::complex<float>      {0.0F, static_cast<float>      (imag_literal)}; }
    STL_LOCAL_CONSTEXPR std::complex<double>      operator""i (unsigned long long imag_literal) { return std::complex<double>     {0.0,  static_cast<double>     (imag_literal)}; }
    STL_LOCAL_CONSTEXPR std::complex<long double> operator""il(unsigned long long imag_literal) { return std::complex<long double>{0.0L, static_cast<long double>(imag_literal)}; }
  }

#endif // _COMPLEX_2012_02_20_
