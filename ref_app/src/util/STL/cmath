///////////////////////////////////////////////////////////////////////////////
//  Copyright Christopher Kormanyos 2007 - 2020.
//  Distributed under the Boost Software License,
//  Version 1.0. (See accompanying file LICENSE_1_0.txt
//  or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef CMATH_2010_02_23_
  #define CMATH_2010_02_23_

  // Implement most of <cmath> for compilers that do not yet support it.

  extern "C"
  {
    bool isnanf   (float);
    bool isnan    (double);
    bool isnanl   (long double);

    bool isfinitef(float);
    bool isfinite (double);
    bool isfinitel(long double);

    int ilogbf(float);
    int ilogb (double);
    int ilogbl(long double);
  }

  #if defined(__GNUC__) && defined(__xXTENSA__)

  // Xtensa (ESP32) uses a version of its own <cmath>.
  #include <impl/xtensa/cmath_for_xtensa.h>

  #else

  #include <cstdfloat>

  #if defined(__GNUC__)

    namespace std
    {
      #if defined(__AVR__)
        #define __BUILTIN_ISNANF __builtin_isnan
        #define __BUILTIN_FABSF  __builtin_fabs
        #define __BUILTIN_FMODF  __builtin_fmod
        #define __BUILTIN_MODFF  __builtin_modff
        #define __BUILTIN_FLOORF __builtin_floor
        #define __BUILTIN_CEILF  __builtin_ceil
        #define __BUILTIN_FREXPF __builtin_frexp
        #define __BUILTIN_LDEXPF __builtin_ldexp
        #define __BUILTIN_SQRTF  __builtin_sqrt
        #define __BUILTIN_SINF   __builtin_sin
        #define __BUILTIN_COSF   __builtin_cos
        #define __BUILTIN_TANF   __builtin_tan
        #define __BUILTIN_ASINF  __builtin_asin
        #define __BUILTIN_ACOSF  __builtin_acos
        #define __BUILTIN_ATANF  __builtin_atan
        #define __BUILTIN_ATAN2F __builtin_atan2
        #define __BUILTIN_EXPF   __builtin_exp
        #define __BUILTIN_POWF   __builtin_pow
        #define __BUILTIN_LOGF   __builtin_log
        #define __BUILTIN_LOG10F __builtin_log10
        #define __BUILTIN_SINHF  __builtin_sinh
        #define __BUILTIN_COSHF  __builtin_cosh
        #define __BUILTIN_TANHF  __builtin_tanh
      #else
        #define __BUILTIN_ISNANF __builtin_isnanf
        #define __BUILTIN_FABSF  __builtin_fabsf
        #define __BUILTIN_FMODF  __builtin_fmodf
        #define __BUILTIN_MODFF  __builtin_modff
        #define __BUILTIN_FLOORF __builtin_floorf
        #define __BUILTIN_CEILF  __builtin_ceilf
        #define __BUILTIN_FREXPF __builtin_frexpf
        #define __BUILTIN_LDEXPF __builtin_ldexpf
        #define __BUILTIN_SQRTF  __builtin_sqrtf
        #define __BUILTIN_SINF   __builtin_sinf
        #define __BUILTIN_COSF   __builtin_cosf
        #define __BUILTIN_TANF   __builtin_tanf
        #define __BUILTIN_ASINF  __builtin_asinf
        #define __BUILTIN_ACOSF  __builtin_acosf
        #define __BUILTIN_ATANF  __builtin_atanf
        #define __BUILTIN_ATAN2F __builtin_atan2f
        #define __BUILTIN_EXPF   __builtin_expf
        #define __BUILTIN_POWF   __builtin_powf
        #define __BUILTIN_LOGF   __builtin_logf
        #define __BUILTIN_LOG10F __builtin_log10f
        #define __BUILTIN_SINHF  __builtin_sinhf
        #define __BUILTIN_COSHF  __builtin_coshf
        #define __BUILTIN_TANHF  __builtin_tanhf
      #endif // __AVR__ or not __AVR__ stuff

      #define __BUILTIN_ISNAN  __builtin_isnan
      #define __BUILTIN_FABS   __builtin_fabs
      #define __BUILTIN_FMOD   __builtin_fmod
      #define __BUILTIN_MODF   __builtin_modf
      #define __BUILTIN_FLOOR  __builtin_floor
      #define __BUILTIN_CEIL   __builtin_ceil
      #define __BUILTIN_FREXP  __builtin_frexp
      #define __BUILTIN_LDEXP  __builtin_ldexp
      #define __BUILTIN_SQRT   __builtin_sqrt
      #define __BUILTIN_SIN    __builtin_sin
      #define __BUILTIN_COS    __builtin_cos
      #define __BUILTIN_TAN    __builtin_tan
      #define __BUILTIN_ASIN   __builtin_asin
      #define __BUILTIN_ACOS   __builtin_acos
      #define __BUILTIN_ATAN   __builtin_atan
      #define __BUILTIN_ATAN2  __builtin_atan2
      #define __BUILTIN_EXP    __builtin_exp
      #define __BUILTIN_POW    __builtin_pow
      #define __BUILTIN_LOG    __builtin_log
      #define __BUILTIN_LOG10  __builtin_log10
      #define __BUILTIN_SINH   __builtin_sinh
      #define __BUILTIN_COSH   __builtin_cosh
      #define __BUILTIN_TANH   __builtin_tanh

      #define __BUILTIN_ISNANL __builtin_isnanl
      #define __BUILTIN_FABSL  __builtin_fabsl
      #define __BUILTIN_FMODL  __builtin_fmodl
      #define __BUILTIN_MODFL  __builtin_modfl
      #define __BUILTIN_FLOORL __builtin_floorl
      #define __BUILTIN_CEILL  __builtin_ceill
      #define __BUILTIN_FREXPL __builtin_frexpl
      #define __BUILTIN_LDEXPL __builtin_ldexpl
      #define __BUILTIN_SQRTL  __builtin_sqrtl
      #define __BUILTIN_SINL   __builtin_sinl
      #define __BUILTIN_COSL   __builtin_cosl
      #define __BUILTIN_TANL   __builtin_tanl
      #define __BUILTIN_ASINL  __builtin_asinl
      #define __BUILTIN_ACOSL  __builtin_acosl
      #define __BUILTIN_ATANL  __builtin_atanl
      #define __BUILTIN_ATAN2L __builtin_atan2l
      #define __BUILTIN_EXPL   __builtin_expl
      #define __BUILTIN_POWL   __builtin_powl
      #define __BUILTIN_LOGL   __builtin_logl
      #define __BUILTIN_LOG10L __builtin_log10l
      #define __BUILTIN_SINHL  __builtin_sinhl
      #define __BUILTIN_COSHL  __builtin_coshl
      #define __BUILTIN_TANHL  __builtin_tanhl

      inline constexpr bool          isnan   (float x) { return __BUILTIN_ISNANF(x); }
      inline           bool          isfinite(float x) { return ::isfinite(x); }
      inline           int           ilogb   (float x) { return ::ilogb(x); }

      inline constexpr float         abs  (float       x)                 { return __BUILTIN_FABSF (x); }
      inline constexpr double        abs  (double      x)                 { return __BUILTIN_FABS  (x); }
      inline constexpr long double   abs  (long double x)                 { return __BUILTIN_FABSL (x); }

      inline constexpr float         fabs (float       x)                 { return __BUILTIN_FABSF (x); }
      inline constexpr double        fabs (double      x)                 { return __BUILTIN_FABS  (x); }
      inline constexpr long double   fabs (long double x)                 { return __BUILTIN_FABSL (x); }

      inline constexpr float         fmod (float       x, float       y)  { return __BUILTIN_FMODF (x, y); }
      inline constexpr double        fmod (double      x, double      y)  { return __BUILTIN_FMOD  (x, y); }
      inline constexpr long double   fmod (long double x, long double y)  { return __BUILTIN_FMODL (x, y); }

      inline constexpr float         modf (float       x, float*       p) { return __BUILTIN_MODFF (x, p); }
      inline constexpr double        modf (double      x, double*      p) { return __BUILTIN_MODF  (x, p); }
      inline constexpr long double   modf (long double x, long double* p) { return __BUILTIN_MODFL (x, p); }

      inline constexpr float         floor(float       x)                 { return __BUILTIN_FLOORF(x); }
      inline constexpr double        floor(double      x)                 { return __BUILTIN_FLOOR (x); }
      inline constexpr long double   floor(long double x)                 { return __BUILTIN_FLOORL(x); }

      inline constexpr float         ceil (float       x)                 { return __BUILTIN_CEILF (x); }
      inline constexpr double        ceil (double      x)                 { return __BUILTIN_CEIL  (x); }
      inline constexpr long double   ceil (long double x)                 { return __BUILTIN_CEILL (x); }

      inline constexpr float         frexp(float       x, int* p)         { return __BUILTIN_FREXPF(x, p); }
      inline constexpr double        frexp(double      x, int* p)         { return __BUILTIN_FREXP (x, p); }
      inline constexpr long double   frexp(long double x, int* p)         { return __BUILTIN_FREXPL(x, p); }

      inline constexpr float         ldexp(float       x, int p)          { return __BUILTIN_LDEXPF(x, p); }
      inline constexpr double        ldexp(double      x, int p)          { return __BUILTIN_LDEXP (x, p); }
      inline constexpr long double   ldexp(long double x, int p)          { return __BUILTIN_LDEXPL(x, p); }

      inline constexpr float         sqrt (float       x)                 { return __BUILTIN_SQRTF (x); }
      inline constexpr double        sqrt (double      x)                 { return __BUILTIN_SQRT  (x); }
      inline constexpr long double   sqrt (long double x)                 { return __BUILTIN_SQRTL (x); }

      inline constexpr float         sin  (float       x)                 { return __BUILTIN_SINF  (x); }
      inline constexpr double        sin  (double      x)                 { return __BUILTIN_SIN   (x); }
      inline constexpr long double   sin  (long double x)                 { return __BUILTIN_SINL  (x); }

      inline constexpr float         cos  (float       x)                 { return __BUILTIN_COSF  (x); }
      inline constexpr double        cos  (double      x)                 { return __BUILTIN_COS   (x); }
      inline constexpr long double   cos  (long double x)                 { return __BUILTIN_COSL  (x); }

      inline constexpr float         tan  (float       x)                 { return __BUILTIN_TANF  (x); }
      inline constexpr double        tan  (double      x)                 { return __BUILTIN_TAN   (x); }
      inline constexpr long double   tan  (long double x)                 { return __BUILTIN_TANL  (x); }

      inline constexpr float         asin (float       x)                 { return __BUILTIN_ASINF (x); }
      inline constexpr double        asin (double      x)                 { return __BUILTIN_ASIN  (x); }
      inline constexpr long double   asin (long double x)                 { return __BUILTIN_ASINL (x); }

      inline constexpr float         acos (float       x)                 { return __BUILTIN_ACOSF (x); }
      inline constexpr double        acos (double      x)                 { return __BUILTIN_ACOS  (x); }
      inline constexpr long double   acos (long double x)                 { return __BUILTIN_ACOSL (x); }

      inline constexpr float         atan (float       x)                 { return __BUILTIN_ATANF (x); }
      inline constexpr double        atan (double      x)                 { return __BUILTIN_ATAN  (x); }
      inline constexpr long double   atan (long double x)                 { return __BUILTIN_ATANL (x); }

      inline constexpr float         atan2(float       y, float       x)  { return __BUILTIN_ATAN2F(y, x); }
      inline constexpr double        atan2(double      y, double      x)  { return __BUILTIN_ATAN2 (y, x); }
      inline constexpr long double   atan2(long double y, long double x)  { return __BUILTIN_ATAN2L(y, x); }

      inline constexpr float         exp  (float       x)                 { return __BUILTIN_EXPF  (x); }
      inline constexpr double        exp  (double      x)                 { return __BUILTIN_EXPF  (x); }
      inline constexpr long double   exp  (long double x)                 { return __BUILTIN_EXPL  (x); }

      inline constexpr float         pow  (float       x, float       a)  { return __BUILTIN_POWF  (x, a); }
      inline constexpr double        pow  (double      x, double      a)  { return __BUILTIN_POW   (x, a); }
      inline constexpr long double   pow  (long double x, long double a)  { return __BUILTIN_POWL  (x, a); }

      inline constexpr float         log  (float       x)                 { return __BUILTIN_LOGF  (x); }
      inline constexpr double        log  (double      x)                 { return __BUILTIN_LOG   (x); }
      inline constexpr long double   log  (long double x)                 { return __BUILTIN_LOGL  (x); }

      inline constexpr float         log10(float       x)                 { return __BUILTIN_LOG10F(x); }
      inline constexpr double        log10(double      x)                 { return __BUILTIN_LOG10 (x); }
      inline constexpr long double   log10(long double x)                 { return __BUILTIN_LOG10L(x); }

      inline constexpr float         sinh (float       x)                 { return __BUILTIN_SINHF (x); }
      inline constexpr double        sinh (double      x)                 { return __BUILTIN_SINH  (x); }
      inline constexpr long double   sinh (long double x)                 { return __BUILTIN_SINHL (x); }

      inline constexpr float         cosh (float       x)                 { return __BUILTIN_COSHF (x); }
      inline constexpr double        cosh (double      x)                 { return __BUILTIN_COSH  (x); }
      inline constexpr long double   cosh (long double x)                 { return __BUILTIN_COSHL (x); }

      inline constexpr float         tanh (float       x)                 { return __BUILTIN_TANHF (x); }
      inline constexpr double        tanh (double      x)                 { return __BUILTIN_TANH  (x); }
      inline constexpr long double   tanh (long double x)                 { return __BUILTIN_TANHL (x); }
    } // namespace std

  #else

    #include <math.h>

    namespace std
    {
      inline constexpr float       abs(float       x) { return ::fabsf(x); }
      inline constexpr double      abs(double      x) { return ::fabs (x); }
      inline constexpr long double abs(long double x) { return ::fabsl(x); }

      using ::fabs;
      using ::fmod;
      using ::modf;
      using ::floor;
      using ::ceil;
      using ::frexp;
      using ::ldexp;
      using ::sqrt;
      using ::sin;
      using ::cos;
      using ::tan;
      using ::asin;
      using ::acos;
      using ::atan;
      using ::atan2;
      using ::exp;
      using ::pow;
      using ::log;
      using ::log10;
      using ::sinh;
      using ::cosh;
      using ::tanh;
    }

  #endif // __GNUC__ or not __GNUC__ stuff

  namespace std
  {
    // Provide certain functions that are often missing from <math.h>.
    // Here, we patch some of these in an exemplary fashion for the
    // proposed std::float32_t.
    float32_t asinh (std::float32_t x);
    float32_t acosh (std::float32_t x);
    float32_t atanh (std::float32_t x);
    float32_t tgamma(std::float32_t x);
  }

  #endif

#endif // CMATH_2010_02_23_
